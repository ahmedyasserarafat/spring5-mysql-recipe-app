# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-browsers-legacy

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: mvn clean install

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run tests! and gen code coverage
      - run: mvn integration-test














        version: 2.1

        jobs: # basic units of work in a run
          build:
            docker: # use the Docker executor
              # CircleCI node images available at: https://hub.docker.com/r/circleci/node/
              - image: circleci/node:14.17-browsers
                auth:
                  username: mydockerhub-user
                  password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
            steps: # steps that comprise the `build` job
              - checkout # check out source code to working directory
              # Run a step to setup an environment variable
              # Redirect MY_ENV_VAR into $BASH_ENV
              - run:
                  name: "Setup custom environment variables"
                  command: echo 'export MY_ENV_VAR="FOO"' >> $BASH_ENV
              - run: # print the name of the branch we're on
                  name: "What branch am I on?"
                  command: echo ${CIRCLE_BRANCH}
              # Run another step, the same as above; note that you can
              # invoke environment variable without curly braces.
              - run:
                  name: "What branch am I on now?"
                  command: echo $CIRCLE_BRANCH
              - run:
                  name: "What was my custom environment variable?"
                  command: echo ${MY_ENV_VAR}
              - run:
                  name: "Print an env var stored in the Project"
                  command: echo ${PROJECT_ENV_VAR}
              - run:
                  name: "Print an env var stored in a Context"
                  command: echo ${CONTEXT_ENV_VAR}

        workflows: # a single workflow with a single job called build
          build:
            jobs:
              - build:
                  context: Testing-Env-Vars